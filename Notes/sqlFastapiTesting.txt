from sqlalchemy.orm import Session
from models import Sandwich
from schemas import SandwichCreate, SandwichUpdate

def create(db: Session, sandwich: SandwichCreate):
    db_sandwich = Sandwich(
        name=sandwich.name,
        description=sandwich.description,
        price=sandwich.price
    )
    db.add(db_sandwich)
    db.commit()
    db.refresh(db_sandwich)
    return db_sandwich

def read_all(db: Session):
    return db.query(Sandwich).all()

def read_one(db: Session, sandwich_id: int):
    return db.query(Sandwich).filter(Sandwich.id == sandwich_id).first()

def update(db: Session, sandwich_id: int, sandwich: SandwichUpdate):
    db_sandwich = db.query(Sandwich).filter(Sandwich.id == sandwich_id)
    if not db_sandwich.first():
        return None
    update_data = sandwich.dict(exclude_unset=True)
    db_sandwich.update(update_data, synchronize_session=False)
    db.commit()
    return db_sandwich.first()

def delete(db: Session, sandwich_id: int):
    db_sandwich = db.query(Sandwich).filter(Sandwich.id == sandwich_id)
    if not db_sandwich.first():
        return None
    db_sandwich.delete(synchronize_session=False)
    db.commit()
    return True







from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session
from dependencies.database import get_db
from controllers import sandwiches
from schemas import SandwichCreate, SandwichUpdate, Sandwich

app = FastAPI()

@app.post("/sandwiches/", response_model=Sandwich, tags=["Sandwiches"])
def create_sandwich(sandwich: SandwichCreate, db: Session = Depends(get_db)):
    return sandwiches.create(db=db, sandwich=sandwich)

@app.get("/sandwiches/", response_model=list[Sandwich], tags=["Sandwiches"])
def read_sandwiches(db: Session = Depends(get_db)):
    return sandwiches.read_all(db)

@app.get("/sandwiches/{sandwich_id}", response_model=Sandwich, tags=["Sandwiches"])
def read_one_sandwich(sandwich_id: int, db: Session = Depends(get_db)):
    sandwich = sandwiches.read_one(db, sandwich_id=sandwich_id)
    if sandwich is None:
        raise HTTPException(status_code=404, detail="Sandwich not found")
    return sandwich

@app.put("/sandwiches/{sandwich_id}", response_model=Sandwich, tags=["Sandwiches"])
def update_sandwich(sandwich_id: int, sandwich: SandwichUpdate, db: Session = Depends(get_db)):
    sandwich_db = sandwiches.update(db, sandwich_id=sandwich_id, sandwich=sandwich)
    if sandwich_db is None:
        raise HTTPException(status_code=404, detail="Sandwich not found")
    return sandwich_db

@app.delete("/sandwiches/{sandwich_id}", tags=["Sandwiches"])
def delete_sandwich(sandwich_id: int, db: Session = Depends(get_db)):
    success = sandwiches.delete(db, sandwich_id=sandwich_id)
    if not success:
        raise HTTPException(status_code=404, detail="Sandwich not found")
    return {"message": "Sandwich deleted successfully"}
